.. _deployment-servers:

Servers
=======

.. note:: Deployment arcitectures vary widely depending on the needs and traffic of the site. The setup described below is minimally configured and works well for most instances.

We serve Django on Ubuntu Linux with a PostgreSQL database backend via `gunicorn <http://www.gunicorn.org>`__ or `uWSGI <http://projects.unbit.it/uwsgi>`__ from behind an `Nginx <http://nginx.net>`__ frontend proxy. For simplicity, we'll only be discussing Gunicorn/Nginx here.

.. index:: Nginx

Nginx
-----

`Nginx <http://nginx.net>`__ makes for a great frontend server due to its speed, stability and low resource footprint. The typical Nginx configuration for a site looks like this:

.. literalinclude:: /examples/nginx.conf
    :language: nginx
    
.. rubric:: What Does it Do?

The first block tells Nginx where to find the server hosting our Django site. The second block redirects any request coming in on ``www.domain.com`` to ``domain.com`` so each resource has only one canonical URL. The final section is the one that does all the work. It tells Nginx to check if a file matching the request exists in ``/var/www/domain.com``. If it does, it serves that file, if it doesn't, it proxies the request to the Django site.

.. index:: 
    pair: Nginx; SSL

SSL
^^^

Another benefit to running a frontend server is SSL termination. Rather than having two Django instances running for SSL and non-SSL access, we can have Nginx act as the gatekeeper redirecting all requests back to a single non-SSL WSGI instance listening on the ``localhost``. Here's what that would look like:

.. literalinclude:: /examples/nginx_ssl.conf
    :language: nginx
    
You can include this code at the bottom of your non-SSL configuration file.

.. index:: Gunicorn

Gunicorn
--------

Gunicorn is a lightweight WSGI server that can scale from small deploys to high-traffic sites. You can install it via ``pip install gunicorn``. Since Nginx will be listening for HTTP(S) requests, you'll need to bind Gunicorn to a different port. While you're at it, you can tell it to only respond to the ``localhost``. A simple gunicorn process might look like this:

.. sourcecode:: bash

    $ gunicorn --workers=4 4 --bind=127.0.0.1:9000 my_project.wsgi:application

This spawns a gunicorn process with 4 workers listening on http://127.0.0.1:9000. If your project doesn't already have a ``wsgi.py`` file, you'll want to add one. See `the Django WSGI docs <https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/#the-application-object>`__ or `django-layout <https://github.com/lincolnloop/django-layout/blob/master/project_name/wsgi.py>`__ for an example.

Process Management
^^^^^^^^^^^^^^^^^^

You want to be sure that gunicorn is always running and that it starts up automatically after a server reboot. If you are deploying to Ubuntu, ``upstart`` is probably the easiest way to get started. Here is a sample config:

.. literalinclude:: /examples/upstart.conf
    :language: bash

Save this file to ``/etc/init/gunicorn.conf`` and run ``sudo start gunicorn``. For troubleshooting, your logs will be visible at ``/var/log/upstart/gunicorn.log``.

.. note:: `Supervisor <http://supervisord.org/>`__ is a pure Python option if you don't have access to ``upstart``.
